services:
    database:
        build:
            context: ./database
            dockerfile: Dockerfile
        container_name: postgres_db
        environment:
            POSTGRES_USER: ${DATABASE_USER}
            POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
            POSTGRES_DB: ${DATABASE}
        volumes:
            - postgres_data:/var/lib/postgresql/data
        ports:
            - "5433:5432"
        networks:
            - api-network
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -d ${DATABASE} -U ${DATABASE_USER}"]
            interval: 10s
            timeout: 5s
            retries: 5

    server:
        build:
            context: ./backend/Back
            dockerfile: Dockerfile
        environment:
            - ASPNETCORE_ENVIRONMENT=Development
            - ConnectionStrings__DefaultConnection="Host=database;Port=5432;Username=${DATABASE_USER};Password=${DATABASE_PASSWORD};Database=${DATABASE}"
            - JWT_SECRET_KEY=${JWT_SECRET_KEY}
            - JWT_ISSUER=http://localhost:8080
            - JWT_AUDIENCE=http://localhost:8080
        ports:
            - "8088:8080"
            - "8081:8081"
        networks:
            - api-network
        depends_on:
            database:
                condition: service_healthy
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 10s

    adminpanel:
        build:
            context: ./AdminPanel
            dockerfile: Dockerfile
        environment:
            - ASPNETCORE_ENVIRONMENT=Development
            - ConnectionStrings__DefaultConnection="Host=database;Port=5432;Username=${DATABASE_USER};Password=${DATABASE_PASSWORD};Database=${DATABASE}"
            - JWT_SECRET_KEY=${JWT_SECRET_KEY}
            - JWT_ISSUER=http://localhost:8082
            - JWT_AUDIENCE=http://localhost:8082
        ports:
            - "8082:8082"
            - "8083:8083"
        networks:
            - api-network
        depends_on:
            database:
                condition: service_healthy
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 10s

    frontend:
        build:
            context: ./frontend-vue
            dockerfile: Dockerfile
        ports:
            - "8084:8080"
        networks:
            - api-network
        depends_on:
            - server
        volumes:
            - ./frontend-vue:/app
            - /app/node_modules
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:8084/health"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 10s

    admin-frontend:
        build:
            context: ./frontend-admin
            dockerfile: Dockerfile
        ports:
            - "8085:8085"
        networks:
            - api-network
        depends_on:
            - adminpanel
        volumes:
            - ./frontend-admin:/app
            - /app/node_modules
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:8085"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 10s

networks:
    api-network:
        driver: bridge

volumes:
    postgres_data:
