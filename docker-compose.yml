services:
    database:
        build:
            context: ./database
            dockerfile: Dockerfile
        container_name: postgres_db
        environment:
            POSTGRES_USER: api_user
            POSTGRES_PASSWORD: api_user_password
            POSTGRES_DB: api_database
        volumes:
            - postgres_data:/var/lib/postgresql/data
        ports:
            - "5433:5432"
        networks:
            - api-network
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -d api_database -U api_user"]
            interval: 10s
            timeout: 5s
            retries: 5

    server:
        build:
            context: ./backend/Back
            dockerfile: Dockerfile
        environment:
            - ASPNETCORE_ENVIRONMENT=Development
            - ConnectionStrings__DefaultConnection=Host=database;Port=5432;Database=api_database;Username=api_user;Password=api_user_password
        ports:
            - "8088:8080"
            - "8081:8081"
        networks:
            - api-network
        depends_on:
            database:
                condition: service_healthy
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 10s

    adminpanel:
        build:
            context: ./AdminPanel
            dockerfile: Dockerfile
        environment:
            - ASPNETCORE_ENVIRONMENT=Development
            - ConnectionStrings__DefaultConnection=Host=database;Port=5432;Database=api_database;Username=api_user;Password=api_user_password
            - JWT_SECRET_KEY=${JWT_SECRET_KEY}
            - JWT_ISSUER=${JWT_ISSUER}
            - JWT_AUDIENCE=${JWT_AUDIENCE}
        ports:
            - "8082:8082"
            - "8083:8083"
        networks:
            - api-network
        depends_on:
            database:
                condition: service_healthy
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 10s

networks:
    api-network:
        driver: bridge

volumes:
    postgres_data:
